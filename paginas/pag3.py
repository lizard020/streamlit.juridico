import plotly.express as px
import pandas as pd
import streamlit as st


# ‚úÖ Acesso global ao DataFrame
if 'df' in st.session_state:
    df = st.session_state.df
else:
    st.error("O DataFrame n√£o foi carregado corretamente.")
    st.stop()  # üö´ Interrompe a execu√ß√£o se o DataFrame n√£o foi carregado


def formata_numero(valor, prefixo=''):
    unidades = ['', 'k', 'mi', 'bi', 'tri']
    
    for i, unidade in enumerate(unidades):
        if valor < 1000:
            return f'{prefixo} {valor:.2f} {unidade}'.strip()
        valor /= 1000
    return f'{prefixo} {valor:.2f} {unidades[-1]}'.strip()

## P√ÅGINA 3

## Vari√°veis para Tabelas (cidades_df)

valores = df.groupby('Lota√ß√£o')['Valor Pedido Inicial Atualizado 31/03/2022'].sum().sort_values(ascending=False)
valores = pd.DataFrame(valores).reset_index()
valores = valores.rename(columns={'Valor Pedido Inicial Atualizado 31/03/2022':'Valor'})
cidades = pd.DataFrame(df['Lota√ß√£o'].value_counts()).reset_index()
cidades_df = cidades.merge(valores).rename(columns={'count':'Processos'})
cidades_df = (
    cidades_df
    .style
    .background_gradient(subset=['Valor'], cmap='Blues')  # Gradiente na coluna Valor
    .background_gradient(subset=['Processos'], cmap='Blues')  # Gradiente na coluna Processos
)
cidades_df.format({'Valor': lambda val: formata_numero(val, "R$")})

# GR√ÅFICOS TREEMAP (LOTA√á√ÉO E √ÅREA)

# Corrigindo o valor incorreto na coluna 'Lota√ß√£o'
df['Lota√ß√£o'] = df['Lota√ß√£o'].replace('Riber√£o Preto', 'Ribeir√£o Preto')

lot_area_contagem = df.groupby(['Lota√ß√£o', '√Årea']).size().reset_index(name='Contagem')

# Exibindo o resultado
count_lot = df.groupby(['Lota√ß√£o']).size().reset_index(name="Contagem").sort_values(by='Contagem', ascending=False)

# Exibindo o resultado
count_area = df.groupby(['√Årea']).size().reset_index(name="Contagem").sort_values(by='Contagem', ascending=False)

# Calcula a contagem total por Lota√ß√£o
lotacao_totais = lot_area_contagem.groupby('Lota√ß√£o')['Contagem'].sum().reset_index()
lotacao_totais.columns = ['Lota√ß√£o', 'Total_Contagem']

# Mescla o total de contagem por lota√ß√£o de volta ao DataFrame principal
lot_area_contagem = lot_area_contagem.merge(lotacao_totais, on='Lota√ß√£o')

# Cria o gr√°fico de treemap, usando 'Total_Contagem' para definir a cor
fig_map = px.treemap(
    lot_area_contagem,
    path=[px.Constant('Reclamantes'), 'Lota√ß√£o', '√Årea'],
    values='Contagem',
    color='Total_Contagem',  # Usa o total de contagem para aplicar a escala
    color_continuous_scale='Blues',
    title = "Ditribui√ß√£o dos Processos por Lota√ß√£o e √Årea"
)

fig_map.update_traces(
    hovertemplate=' <b>%{parent}</b><br> %{label}<br> %{value}<extra></extra>'
)

# Atualizando o layout para remover a barra de cor e ajustar o tamanho
fig_map.update_layout(
    coloraxis_showscale=False,  # Remove a barra de cor
    autosize=True,               # Habilita o redimensionamento autom√°tico
    margin=dict(t=30, l=5, r=0, b=20)  # Margens reduzidas
)

# √ÅREAS DA EMPRESA

area = pd.DataFrame(df.groupby('√Årea')['√Årea'].count())
area_v = pd.DataFrame(df.groupby('√Årea')['Valor Pedido Inicial Atualizado 31/03/2022'].sum())
area = area.rename(columns={'√Årea':'Processos'}).reset_index()
area_v = area_v.rename(columns={'√Årea':'Valores'}).reset_index()
area = area.merge(area_v).rename(columns={'Valor Pedido Inicial Atualizado 31/03/2022':'Valor'})
area = area.sort_values(by='Processos', ascending=False)
area_cor = (
    area
    .style
    .background_gradient(subset=['Valor'], cmap='Blues')  # Gradiente na coluna Valor
    .background_gradient(subset=['Processos'], cmap='Blues')  # Gradiente na coluna Processos
)
area_cor = area_cor.format({'Valor': lambda val: formata_numero(val, "R$")})

area_pie = area.copy()
area_pie["valor formatado"] = [formata_numero(val, "R$") for val in area["Valor"]]

pie_processos = px.pie(area_pie, values='Processos', names='√Årea', hole=0.7, title='Processos por √Årea', color_discrete_sequence=px.colors.sequential.Blues[::-1])
pie_processos.update_layout(
    showlegend=False,
    margin=dict(l=0, r=0, t=30, b=15),  # Removes extra margins
    width=270,  # Set your desired width
    height=270  # Set your desired height
    )
pie_processos.update_traces(
    textinfo="none",
    hovertemplate="<b>%{label}</b><br>%{percent}<br>%{value}<extra></extra> processos")

pie_valor = px.pie(area_pie, values='Valor', names='√Årea', hole=0.7, title='Valores por √Årea', color_discrete_sequence=px.colors.sequential.Blues[::-1])
pie_valor.update_layout(
    showlegend=False,
    margin=dict(l=0, r=0, t=30, b=15),  # Removes extra margins
    width=270,  # Set your desired width
    height=270  # Set your desired height
    )
pie_valor.update_traces(
    textinfo="none",
    hovertemplate="<b>%{label}</b><br>%{percent}<br>%{customdata}<extra></extra>",
    customdata=area_pie["valor formatado"])


periodo = df.groupby('√Årea')[['Per√≠odo de Empresa', 'Valor Pedido Inicial Atualizado 31/03/2022']].median().reset_index().sort_values(by='Per√≠odo de Empresa')
periodo = periodo.rename(columns={'Valor Pedido Inicial Atualizado 31/03/2022':'Inicial M√©dia'})
periodo['valor formatado'] = periodo['Inicial M√©dia'].apply(lambda x : formata_numero(x, "R$"))

bar_periodo = px.bar(periodo, 
                     x='√Årea', 
                     y='Per√≠odo de Empresa', 
                     title="Per√≠odo de Empresa por √Årea",
                     color_discrete_sequence=px.colors.sequential.Blues[::-1]
                     )
bar_periodo.update_layout(margin=dict(l=0, r=0, t=50, b=0))
bar_periodo.update_traces(hovertemplate="<b>%{label}</b><br>%{value}<extra></extra> anos")

bar_inicial = px.bar(periodo, 
                     x='√Årea', 
                     y='Inicial M√©dia',
                     title="Pedido Inicial M√©dio por √Årea",
                     color_discrete_sequence=px.colors.sequential.Blues[::-1]
                     )
bar_inicial.update_layout(margin=dict(l=0, r=0, t=50, b=0))
bar_inicial.update_traces(
    hovertemplate="<b>%{label}</b><br>%{customdata}<extra></extra>",
    customdata=periodo["valor formatado"])